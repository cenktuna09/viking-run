bitter.jnibridge.JNIBridge -> bitter.jnibridge.JNIBridge:
    void <init>() -> <init>
    java.lang.Object invoke(long,java.lang.Class,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void delete(long) -> delete
    java.lang.Object newInterfaceProxy(long,java.lang.Class[]) -> newInterfaceProxy
    void disableInterfaceProxy(java.lang.Object) -> disableInterfaceProxy
bitter.jnibridge.JNIBridge$a -> bitter.jnibridge.JNIBridge$a:
    java.lang.Object a -> a
    long b -> b
    java.lang.reflect.Constructor c -> c
    void <init>(long) -> <init>
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void finalize() -> finalize
    void a() -> a
com.gameanalytics.sdk.GAErrorSeverity -> com.gameanalytics.sdk.a:
    com.gameanalytics.sdk.GAErrorSeverity Undefined -> a
    com.gameanalytics.sdk.GAErrorSeverity Debug -> b
    com.gameanalytics.sdk.GAErrorSeverity Info -> c
    com.gameanalytics.sdk.GAErrorSeverity Warning -> d
    com.gameanalytics.sdk.GAErrorSeverity Error -> e
    com.gameanalytics.sdk.GAErrorSeverity Critical -> f
    java.lang.String value -> g
    int id -> h
    com.gameanalytics.sdk.GAErrorSeverity[] $VALUES -> i
    com.gameanalytics.sdk.GAErrorSeverity[] values() -> values
    com.gameanalytics.sdk.GAErrorSeverity valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.GAPlatform -> com.gameanalytics.sdk.b:
    android.content.Context appContext -> a
    boolean usedResumed -> b
    boolean usedStopped -> c
    boolean initialized -> d
    boolean registered -> e
    java.lang.String activityId -> f
    android.content.Context getApplicationContext() -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.GooglePlayServicesClient -> com.gameanalytics.sdk.c:
    com.gameanalytics.sdk.GooglePlayServicesClient$GooglePlayServicesInfo getGooglePlayServicesInfo(android.content.Context) -> a
com.gameanalytics.sdk.GooglePlayServicesClient$1 -> com.gameanalytics.sdk.c$1:
com.gameanalytics.sdk.GooglePlayServicesClient$GooglePlayServicesConnection -> com.gameanalytics.sdk.c$a:
    boolean retrieved -> a
    java.util.concurrent.LinkedBlockingQueue queue -> b
    void <init>() -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    android.os.IBinder getBinder() -> a
    void <init>(com.gameanalytics.sdk.GooglePlayServicesClient$1) -> <init>
com.gameanalytics.sdk.GooglePlayServicesClient$GooglePlayServicesInfo -> com.gameanalytics.sdk.c$b:
    java.lang.String gpsAdid -> a
    java.lang.Boolean limitAdTrackingEnabled -> b
    void <init>(java.lang.String,java.lang.Boolean) -> <init>
    java.lang.String getGpsAdid() -> a
    java.lang.Boolean isLimitAdTrackingEnabled() -> b
com.gameanalytics.sdk.GooglePlayServicesClient$GooglePlayServicesInterface -> com.gameanalytics.sdk.c$c:
    android.os.IBinder binder -> a
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    java.lang.String getGpsAdid() -> a
    java.lang.Boolean getTrackingEnabled(boolean) -> a
com.gameanalytics.sdk.device.GADevice -> com.gameanalytics.sdk.a.a:
    java.lang.String _sdkGameEngineVersion -> a
    java.lang.String _gameEngineVersion -> b
    java.lang.String _osVersion -> c
    java.lang.String _deviceModel -> d
    java.lang.String _deviceManufacturer -> e
    boolean _isHacked -> f
    java.lang.String _gaid -> g
    boolean _isGooglePlayServicesAvailable -> h
    java.lang.String _oaid -> i
    boolean _lazySetGAID -> j
    boolean _lazySetGooglePlayServicesAvailable -> k
    boolean _lazySetOAID -> l
    java.lang.String _writablepath -> m
    boolean _isLimitedAdTracking -> n
    java.lang.String _connectionType -> o
    java.lang.String _bundleIdentifier -> p
    java.lang.String _appVersion -> q
    int _appBuild -> r
    java.lang.String _appSignature -> s
    java.lang.String _channelId -> t
    java.lang.String _adIdSource -> u
    org.json.JSONObject _imeiJson -> v
    boolean _lazySetImei -> w
    java.lang.String _androidId -> x
    java.lang.String _macSha1 -> y
    java.lang.String _macShortMd5 -> z
    boolean _lazySetNonPlayIds -> A
    void setWritableFilePath(java.lang.String) -> a
    void setIsLimitedAdTracking(boolean) -> a
    void setAdIdSource(java.lang.String) -> b
    java.lang.String getGameEngineVersion() -> a
    java.lang.String getRelevantSdkVersion() -> b
    java.lang.String getBuildPlatform() -> c
    java.lang.String getOSVersion() -> d
    java.lang.String getDeviceModel() -> e
    java.lang.String getDeviceManufacturer() -> f
    boolean getIsHacked() -> g
    java.lang.String getGAID() -> h
    boolean isGooglePlayServicesAvailable() -> i
    java.lang.String getOAID() -> j
    void reloadNonPlayIds(android.content.Context) -> a
    java.lang.String getMacSha1(java.lang.String) -> c
    java.lang.String getMacShortMd5(java.lang.String) -> d
    java.lang.String getAndroidId() -> k
    java.lang.String getMacMd5() -> l
    java.lang.String getMacSha1() -> m
    org.json.JSONObject getImeiJson() -> n
    java.lang.String getAppSignature() -> o
    java.lang.String getWritableFilePath() -> p
    boolean getIsLimitedAdTracking() -> q
    java.lang.String getConnectionType() -> r
    java.lang.String getBundleIdentifier() -> s
    java.lang.String getAppVersion() -> t
    int getAppBuild() -> u
    java.lang.String getChannelId() -> v
    java.lang.String getAdIdSource() -> w
    java.lang.String fixOSVersion(java.lang.String) -> e
    java.lang.String fixDeviceModel(java.lang.String) -> f
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.errorreporter.ExceptionReporter -> com.gameanalytics.sdk.errorreporter.a:
    java.util.HashMap ErrorTypeCountMap -> a
    android.content.Context context -> b
    com.gameanalytics.sdk.errorreporter.ExceptionReporter$Handler handler -> c
    com.gameanalytics.sdk.errorreporter.ExceptionReporter register(android.content.Context) -> a
    void setContext(android.content.Context) -> b
    void <init>(java.lang.Thread$UncaughtExceptionHandler,android.content.Context) -> <init>
    void reportException(java.lang.Thread,java.lang.Throwable) -> a
    void reportException(java.lang.Thread,java.lang.Throwable,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.errorreporter.ExceptionReporter$1 -> com.gameanalytics.sdk.errorreporter.a$1:
com.gameanalytics.sdk.errorreporter.ExceptionReporter$Handler -> com.gameanalytics.sdk.errorreporter.a$a:
    java.lang.Thread$UncaughtExceptionHandler subject -> b
    com.gameanalytics.sdk.errorreporter.ExceptionReporter errorHandler -> c
    com.gameanalytics.sdk.errorreporter.ExceptionReporter this$0 -> a
    void <init>(com.gameanalytics.sdk.errorreporter.ExceptionReporter,java.lang.Thread$UncaughtExceptionHandler) -> <init>
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    com.gameanalytics.sdk.errorreporter.ExceptionReporter access$000(com.gameanalytics.sdk.errorreporter.ExceptionReporter$Handler) -> a
    void <init>(com.gameanalytics.sdk.errorreporter.ExceptionReporter,java.lang.Thread$UncaughtExceptionHandler,com.gameanalytics.sdk.errorreporter.ExceptionReporter$1) -> <init>
com.gameanalytics.sdk.errorreporter.GameAnalyticsExceptionReportService -> com.gameanalytics.sdk.errorreporter.GameAnalyticsExceptionReportService:
    java.lang.String ACTION_SAVE_REPORT -> a
    java.lang.String EXTRA_GAME_KEY -> b
    java.lang.String EXTRA_SECRET_KEY -> c
    java.lang.String EXTRA_WRITABLE_PATH -> d
    java.lang.String EXTRA_INFO_LOG_ENABLED -> e
    java.lang.String EXTRA_VERBOSE_LOG_ENABLED -> f
    java.lang.String TAG -> g
    void <init>() -> <init>
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void saveReport(android.content.Intent) -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.errorreporter.ReportingIntentService -> com.gameanalytics.sdk.errorreporter.b:
    com.gameanalytics.sdk.errorreporter.ExceptionReporter exceptionReporter -> a
    void <init>(java.lang.String) -> <init>
    void onCreate() -> onCreate
com.gameanalytics.sdk.events.EGASdkErrorAction -> com.gameanalytics.sdk.b.a:
    com.gameanalytics.sdk.events.EGASdkErrorAction Undefined -> a
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidCurrency -> b
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidShortString -> c
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidEventPartLength -> d
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidEventPartCharacters -> e
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidStore -> f
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidFlowType -> g
    com.gameanalytics.sdk.events.EGASdkErrorAction StringEmptyOrNull -> h
    com.gameanalytics.sdk.events.EGASdkErrorAction NotFoundInAvailableCurrencies -> i
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidAmount -> j
    com.gameanalytics.sdk.events.EGASdkErrorAction NotFoundInAvailableItemTypes -> k
    com.gameanalytics.sdk.events.EGASdkErrorAction WrongProgressionOrder -> l
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidEventIdLength -> m
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidEventIdCharacters -> n
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidProgressionStatus -> o
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidSeverity -> p
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidLongString -> q
    com.gameanalytics.sdk.events.EGASdkErrorAction DatabaseTooLarge -> r
    com.gameanalytics.sdk.events.EGASdkErrorAction DatabaseOpenOrCreate -> s
    com.gameanalytics.sdk.events.EGASdkErrorAction SqlBegin -> t
    com.gameanalytics.sdk.events.EGASdkErrorAction SqlSetColumn -> u
    com.gameanalytics.sdk.events.EGASdkErrorAction SqlRawQuery -> v
    com.gameanalytics.sdk.events.EGASdkErrorAction SqlCommit -> w
    com.gameanalytics.sdk.events.EGASdkErrorAction SqlRollback -> x
    com.gameanalytics.sdk.events.EGASdkErrorAction JsonError -> y
    com.gameanalytics.sdk.events.EGASdkErrorAction FailHttp400 -> z
    com.gameanalytics.sdk.events.EGASdkErrorAction FailHttp401 -> A
    com.gameanalytics.sdk.events.EGASdkErrorAction FailHttp500 -> B
    com.gameanalytics.sdk.events.EGASdkErrorAction FailHttpJsonDecode -> C
    com.gameanalytics.sdk.events.EGASdkErrorAction FailHttpJsonEncode -> D
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidAdAction -> E
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidAdType -> F
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidString -> G
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidAdNetworkName -> H
    com.gameanalytics.sdk.events.EGASdkErrorAction ImpressionDataIsNull -> I
    com.gameanalytics.sdk.events.EGASdkErrorAction InvalidAdNetworkVersion -> J
    java.lang.String value -> K
    int id -> L
    com.gameanalytics.sdk.events.EGASdkErrorAction[] $VALUES -> M
    com.gameanalytics.sdk.events.EGASdkErrorAction[] values() -> values
    com.gameanalytics.sdk.events.EGASdkErrorAction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.events.EGASdkErrorArea -> com.gameanalytics.sdk.b.b:
    com.gameanalytics.sdk.events.EGASdkErrorArea Undefined -> a
    com.gameanalytics.sdk.events.EGASdkErrorArea BusinessEvent -> b
    com.gameanalytics.sdk.events.EGASdkErrorArea ResourceEvent -> c
    com.gameanalytics.sdk.events.EGASdkErrorArea ProgressionEvent -> d
    com.gameanalytics.sdk.events.EGASdkErrorArea DesignEvent -> e
    com.gameanalytics.sdk.events.EGASdkErrorArea ErrorEvent -> f
    com.gameanalytics.sdk.events.EGASdkErrorArea Sql -> g
    com.gameanalytics.sdk.events.EGASdkErrorArea EnsurePersistedStates -> h
    com.gameanalytics.sdk.events.EGASdkErrorArea SessionEnd -> i
    com.gameanalytics.sdk.events.EGASdkErrorArea InitHttp -> j
    com.gameanalytics.sdk.events.EGASdkErrorArea EventsHttp -> k
    com.gameanalytics.sdk.events.EGASdkErrorArea ProcessEvents -> l
    com.gameanalytics.sdk.events.EGASdkErrorArea AddEventsToStore -> m
    com.gameanalytics.sdk.events.EGASdkErrorArea JsonStringToMap -> n
    com.gameanalytics.sdk.events.EGASdkErrorArea SessionStart -> o
    com.gameanalytics.sdk.events.EGASdkErrorArea AddDimensions -> p
    com.gameanalytics.sdk.events.EGASdkErrorArea AddFields -> q
    com.gameanalytics.sdk.events.EGASdkErrorArea InitRequest -> r
    com.gameanalytics.sdk.events.EGASdkErrorArea SendEvents -> s
    com.gameanalytics.sdk.events.EGASdkErrorArea InitialInit -> t
    com.gameanalytics.sdk.events.EGASdkErrorArea AdEvent -> u
    com.gameanalytics.sdk.events.EGASdkErrorArea ImpressionEvent -> v
    java.lang.String value -> w
    int id -> x
    com.gameanalytics.sdk.events.EGASdkErrorArea[] $VALUES -> y
    com.gameanalytics.sdk.events.EGASdkErrorArea[] values() -> values
    com.gameanalytics.sdk.events.EGASdkErrorArea valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.events.EGASdkErrorCategory -> com.gameanalytics.sdk.b.c:
    com.gameanalytics.sdk.events.EGASdkErrorCategory Undefined -> a
    com.gameanalytics.sdk.events.EGASdkErrorCategory EventValidation -> b
    com.gameanalytics.sdk.events.EGASdkErrorCategory Database -> c
    com.gameanalytics.sdk.events.EGASdkErrorCategory Init -> d
    com.gameanalytics.sdk.events.EGASdkErrorCategory Http -> e
    com.gameanalytics.sdk.events.EGASdkErrorCategory Json -> f
    java.lang.String value -> g
    int id -> h
    com.gameanalytics.sdk.events.EGASdkErrorCategory[] $VALUES -> i
    com.gameanalytics.sdk.events.EGASdkErrorCategory[] values() -> values
    com.gameanalytics.sdk.events.EGASdkErrorCategory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.events.EGASdkErrorParameter -> com.gameanalytics.sdk.b.d:
    com.gameanalytics.sdk.events.EGASdkErrorParameter Undefined -> a
    com.gameanalytics.sdk.events.EGASdkErrorParameter Currency -> b
    com.gameanalytics.sdk.events.EGASdkErrorParameter CartType -> c
    com.gameanalytics.sdk.events.EGASdkErrorParameter ItemType -> d
    com.gameanalytics.sdk.events.EGASdkErrorParameter ItemId -> e
    com.gameanalytics.sdk.events.EGASdkErrorParameter Store -> f
    com.gameanalytics.sdk.events.EGASdkErrorParameter FlowType -> g
    com.gameanalytics.sdk.events.EGASdkErrorParameter Amount -> h
    com.gameanalytics.sdk.events.EGASdkErrorParameter Progression01 -> i
    com.gameanalytics.sdk.events.EGASdkErrorParameter Progression02 -> j
    com.gameanalytics.sdk.events.EGASdkErrorParameter Progression03 -> k
    com.gameanalytics.sdk.events.EGASdkErrorParameter EventId -> l
    com.gameanalytics.sdk.events.EGASdkErrorParameter ProgressionStatus -> m
    com.gameanalytics.sdk.events.EGASdkErrorParameter Severity -> n
    com.gameanalytics.sdk.events.EGASdkErrorParameter Message -> o
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdAction -> p
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdType -> q
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdSdkName -> r
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdPlacement -> s
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdNetwork -> t
    com.gameanalytics.sdk.events.EGASdkErrorParameter ImpressionData -> u
    com.gameanalytics.sdk.events.EGASdkErrorParameter AdNetworkVersion -> v
    java.lang.String value -> w
    int id -> x
    com.gameanalytics.sdk.events.EGASdkErrorParameter[] $VALUES -> y
    com.gameanalytics.sdk.events.EGASdkErrorParameter[] values() -> values
    com.gameanalytics.sdk.events.EGASdkErrorParameter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.events.GAEvents -> com.gameanalytics.sdk.b.e:
    com.gameanalytics.sdk.events.GAEvents INSTANCE -> a
    com.gameanalytics.sdk.threading.IBlock processEventQueueBlock -> b
    void <init>() -> <init>
    void processEvents(java.lang.String,boolean) -> a
    void updateSessionTime() -> c
    void cleanupEvents() -> a
    void fixMissingSessionEndEvents() -> b
    void addEventToStore(org.json.JSONObject) -> b
    void addErrorEvent(com.gameanalytics.sdk.GAErrorSeverity,java.lang.String,java.util.Map) -> a
    void addDimensionsToEvent(org.json.JSONObject) -> a
    void addFieldsToEvent(org.json.JSONObject,org.json.JSONObject) -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.events.GAEvents$1 -> com.gameanalytics.sdk.b.e$1:
    void <init>() -> <init>
com.gameanalytics.sdk.events.SdkErrorTask -> com.gameanalytics.sdk.b.f:
    java.lang.String type -> a
    byte[] payloadData -> b
    java.lang.String hashHmac -> c
    java.lang.String body -> d
    java.util.HashMap countMap -> e
    java.util.HashMap timestampMap -> f
    void <init>(java.lang.String,byte[],java.lang.String) -> <init>
    java.net.HttpURLConnection doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.net.HttpURLConnection) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.http.EGAHTTPApiResponse -> com.gameanalytics.sdk.c.a:
    com.gameanalytics.sdk.http.EGAHTTPApiResponse NoResponse -> a
    com.gameanalytics.sdk.http.EGAHTTPApiResponse BadResponse -> b
    com.gameanalytics.sdk.http.EGAHTTPApiResponse RequestTimeout -> c
    com.gameanalytics.sdk.http.EGAHTTPApiResponse JsonEncodeFailed -> d
    com.gameanalytics.sdk.http.EGAHTTPApiResponse JsonDecodeFailed -> e
    com.gameanalytics.sdk.http.EGAHTTPApiResponse InternalServerError -> f
    com.gameanalytics.sdk.http.EGAHTTPApiResponse BadRequest -> g
    com.gameanalytics.sdk.http.EGAHTTPApiResponse Unauthorized -> h
    com.gameanalytics.sdk.http.EGAHTTPApiResponse UnknownResponseCode -> i
    com.gameanalytics.sdk.http.EGAHTTPApiResponse Ok -> j
    com.gameanalytics.sdk.http.EGAHTTPApiResponse Created -> k
    com.gameanalytics.sdk.http.EGAHTTPApiResponse[] $VALUES -> l
    com.gameanalytics.sdk.http.EGAHTTPApiResponse[] values() -> values
    com.gameanalytics.sdk.http.EGAHTTPApiResponse valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.http.GAHTTPApi -> com.gameanalytics.sdk.c.b:
    com.gameanalytics.sdk.http.GAHTTPApi INSTANCE -> a
    java.lang.String protocol -> b
    java.lang.String hostName -> c
    java.lang.String version -> d
    java.lang.String remoteConfigsVersion -> e
    java.lang.String baseUrl -> f
    java.lang.String remoteConfigsBaseUrl -> g
    java.lang.String initializeUrlPath -> h
    java.lang.String eventsUrlPath -> i
    boolean useGzip -> j
    void <init>() -> <init>
    com.gameanalytics.sdk.http.GAHTTPApi getInstance() -> a
    com.gameanalytics.sdk.http.EGAHTTPApiResponse processRequestResponse(java.net.HttpURLConnection,java.lang.String,java.lang.String) -> a
    byte[] createPayloadData(java.lang.String,boolean) -> a
    java.net.HttpURLConnection createRequest(java.lang.String,byte[],boolean) -> a
    com.gameanalytics.sdk.http.GAHTTPApi$GAHTTPApiResponseJSONObjectPair sendEventsInArray(java.util.ArrayList) -> a
    void sendSdkErrorEvent(com.gameanalytics.sdk.events.EGASdkErrorCategory,com.gameanalytics.sdk.events.EGASdkErrorArea,com.gameanalytics.sdk.events.EGASdkErrorAction,java.lang.String,java.lang.String,java.lang.String) -> a
    void sendSdkErrorEvent(com.gameanalytics.sdk.events.EGASdkErrorCategory,com.gameanalytics.sdk.events.EGASdkErrorArea,com.gameanalytics.sdk.events.EGASdkErrorAction,com.gameanalytics.sdk.events.EGASdkErrorParameter,java.lang.String,java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.http.GAHTTPApi$GAHTTPApiResponseJSONObjectPair -> com.gameanalytics.sdk.c.b$a:
    com.gameanalytics.sdk.http.EGAHTTPApiResponse response -> a
    org.json.JSONObject json -> b
    com.gameanalytics.sdk.http.GAHTTPApi this$0 -> c
    void <init>(com.gameanalytics.sdk.http.GAHTTPApi) -> <init>
com.gameanalytics.sdk.logging.EGALoggerMessageType -> com.gameanalytics.sdk.d.a:
    com.gameanalytics.sdk.logging.EGALoggerMessageType Error -> a
    com.gameanalytics.sdk.logging.EGALoggerMessageType Warning -> b
    com.gameanalytics.sdk.logging.EGALoggerMessageType Info -> c
    com.gameanalytics.sdk.logging.EGALoggerMessageType Debug -> d
    com.gameanalytics.sdk.logging.EGALoggerMessageType[] $VALUES -> e
    com.gameanalytics.sdk.logging.EGALoggerMessageType[] values() -> values
    com.gameanalytics.sdk.logging.EGALoggerMessageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.logging.GALogger -> com.gameanalytics.sdk.d.b:
    com.gameanalytics.sdk.logging.GALogger INSTANCE -> a
    boolean infoLogEnabled -> b
    boolean infoLogAdvancedEnabled -> c
    boolean debugEnabled -> d
    void <init>() -> <init>
    com.gameanalytics.sdk.logging.GALogger getInstance() -> c
    void setInfoLog(boolean) -> a
    void setAdvancedInfoLog(boolean) -> b
    boolean getInfoLog() -> a
    boolean getAdvancedInfoLog() -> b
    void i(java.lang.String) -> a
    void w(java.lang.String) -> b
    void e(java.lang.String) -> c
    void d(java.lang.String) -> d
    void ii(java.lang.String) -> e
    void sendNotificationMessage(java.lang.String,com.gameanalytics.sdk.logging.EGALoggerMessageType) -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.logging.GALogger$1 -> com.gameanalytics.sdk.d.b$1:
    int[] $SwitchMap$com$gameanalytics$sdk$logging$EGALoggerMessageType -> a
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.state.GAState -> com.gameanalytics.sdk.e.a:
    com.gameanalytics.sdk.state.GAState INSTANCE -> a
    boolean isInitialized -> b
    org.json.JSONObject sdkConfig -> c
    org.json.JSONObject sdkConfigCached -> d
    org.json.JSONObject sdkConfigDefault -> e
    org.json.JSONObject configurations -> f
    java.util.ArrayList remoteConfigsListeners -> g
    java.lang.String[] availableCustomDimensions01 -> h
    java.lang.String[] availableCustomDimensions02 -> i
    java.lang.String[] availableCustomDimensions03 -> j
    java.lang.String currentCustomDimension01 -> k
    java.lang.String currentCustomDimension02 -> l
    java.lang.String currentCustomDimension03 -> m
    java.lang.String[] availableResourceCurrencies -> n
    java.lang.String[] availableResourceItemTypes -> o
    java.lang.String build -> p
    java.lang.String sessionId -> q
    long sessionStart -> r
    java.util.HashMap progressionTries -> s
    int sessionNum -> t
    java.lang.String userId -> u
    boolean useRandomId -> v
    boolean enableErrorReporting -> w
    boolean enableEventSubmision -> x
    java.lang.String configsHash -> y
    java.lang.String abId -> z
    java.lang.String abVariantId -> A
    boolean autoDetectAppVersion -> B
    java.lang.String gameKey -> C
    java.lang.String secretKey -> D
    long clientServerTimeOffset -> E
    void <init>() -> <init>
    com.gameanalytics.sdk.state.GAState getInstance() -> q
    void setInitialized(boolean) -> a
    boolean useErrorReporting() -> a
    boolean isEventSubmissionEnabled() -> b
    void setKeys(java.lang.String,java.lang.String) -> a
    org.json.JSONObject validateAndCleanCustomFields(java.util.Map) -> a
    boolean sessionIsStarted() -> c
    long getSessionStart() -> d
    java.lang.String getSessionId() -> e
    java.lang.String getUserId() -> r
    boolean isInitialized() -> f
    java.lang.String getBuild() -> s
    java.lang.String getSecretKey() -> g
    java.lang.String getGameKey() -> h
    long getClientTsAdjusted() -> i
    org.json.JSONObject getEventAnnotations() -> j
    org.json.JSONObject getSdkErrorEventAnnotations() -> k
    java.lang.String getIdentifier() -> l
    int getSessionNum() -> m
    java.lang.String getDimension01() -> n
    java.lang.String getDimension02() -> o
    java.lang.String getDimension03() -> p
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.store.GAStore -> com.gameanalytics.sdk.f.a:
    com.gameanalytics.sdk.store.GAStore INSTANCE -> c
    java.lang.String dbPath -> d
    android.database.sqlite.SQLiteDatabase sqlDatabase -> e
    boolean dbReady -> a
    boolean tableReady -> b
    void <init>() -> <init>
    com.gameanalytics.sdk.store.GAStore getInstance() -> d
    org.json.JSONArray executeQuerySync(java.lang.String) -> a
    org.json.JSONArray executeQuerySync(java.lang.String,java.util.ArrayList) -> a
    org.json.JSONArray executeQuerySync(java.lang.String,java.util.ArrayList,boolean) -> a
    android.database.sqlite.SQLiteDatabase getDatabase() -> e
    boolean trimEventTable() -> f
    boolean isDbTooLargeForEvents() -> a
    boolean ensureDatabase(boolean) -> a
    void setColumn(android.database.Cursor,android.database.CursorWindow,int,int,org.json.JSONObject,java.lang.String) -> a
    long getDbSizeBytes() -> b
    boolean getTableReady() -> c
    void <clinit>() -> <clinit>
com.gameanalytics.sdk.threading.IBlock -> com.gameanalytics.sdk.g.a:
com.gameanalytics.sdk.utilities.AndroidIdUtil -> com.gameanalytics.sdk.h.a:
    java.lang.String getAndroidId(android.content.Context) -> a
com.gameanalytics.sdk.utilities.GAUtilities -> com.gameanalytics.sdk.h.b:
    byte[] gzipCompress(java.lang.String) -> a
    org.json.JSONObject dictionary(java.lang.String) -> b
    java.lang.String jsonString(java.util.ArrayList) -> a
    boolean stringMatch(java.lang.String,java.lang.String) -> a
    long timeIntervalSince1970() -> a
    java.lang.String hmac(java.lang.String,byte[]) -> a
    java.lang.String getGAID(android.content.Context) -> a
    java.lang.String getOAID(android.content.Context) -> b
    java.lang.Boolean isLimitAdTrackingEnabled(java.lang.String,android.content.Context) -> a
    java.lang.String getMacAddress(android.content.Context) -> c
    java.lang.String getAndroidId(android.content.Context) -> d
    boolean isZeroId(java.lang.String) -> c
    java.lang.String sha1(java.lang.String) -> d
    java.lang.String md5(java.lang.String) -> e
    java.lang.String hash(java.lang.String,java.lang.String) -> b
    java.lang.String convertToHex(byte[]) -> a
    java.lang.String formatString(java.lang.String,java.lang.Object[]) -> a
    boolean checkPermission(android.content.Context,java.lang.String) -> a
com.gameanalytics.sdk.utilities.GAUtilities$1 -> com.gameanalytics.sdk.h.b$1:
    void <init>(java.io.OutputStream) -> <init>
com.gameanalytics.sdk.utilities.MacAddressUtil -> com.gameanalytics.sdk.h.c:
    java.lang.String getMacAddress(android.content.Context) -> a
    java.lang.String getRawMacAddress(android.content.Context) -> b
    java.lang.String loadAddress(java.lang.String) -> a
    java.lang.String removeSpaceString(java.lang.String) -> b
com.gameanalytics.sdk.utilities.Reflection -> com.gameanalytics.sdk.h.d:
    java.lang.Object getAdvertisingInfoObject(java.lang.String,android.content.Context) -> c
    org.json.JSONObject getImeiJson(android.content.Context) -> a
    java.lang.String getAdId(java.lang.String,android.content.Context) -> a
    java.lang.Boolean isLimitAdTrackingEnabled(java.lang.String,android.content.Context) -> b
    java.lang.Object invokeStaticMethod(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object invokeInstanceMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object invokeMethod(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Class[],java.lang.Object[]) -> a
com.gameanalytics.sdk.validators.GAValidator -> com.gameanalytics.sdk.i.a:
    com.gameanalytics.sdk.validators.ValidationResult validateErrorEvent(com.gameanalytics.sdk.GAErrorSeverity,java.lang.String) -> a
    boolean validateSdkErrorEvent(java.lang.String,java.lang.String,com.gameanalytics.sdk.events.EGASdkErrorCategory,com.gameanalytics.sdk.events.EGASdkErrorArea,com.gameanalytics.sdk.events.EGASdkErrorAction) -> a
    boolean validateKeys(java.lang.String,java.lang.String) -> a
    boolean validateString(java.lang.String,boolean) -> a
    boolean validateMediumString(java.lang.String,boolean) -> b
    boolean validateLongString(java.lang.String,boolean) -> c
    boolean validateConnectionType(java.lang.String) -> a
    boolean validateBundleID(java.lang.String) -> b
    boolean validateAppVersion(java.lang.String) -> c
    boolean validateAppBuild(java.lang.Integer) -> a
    boolean validateAppSignature(java.lang.String) -> d
    boolean validateChannelId(java.lang.String) -> e
    boolean validateClientTs(long) -> a
com.gameanalytics.sdk.validators.ValidationResult -> com.gameanalytics.sdk.i.b:
    com.gameanalytics.sdk.events.EGASdkErrorCategory category -> a
    com.gameanalytics.sdk.events.EGASdkErrorArea area -> b
    com.gameanalytics.sdk.events.EGASdkErrorAction action -> c
    com.gameanalytics.sdk.events.EGASdkErrorParameter parameter -> d
    java.lang.String reason -> e
    void <init>(com.gameanalytics.sdk.events.EGASdkErrorCategory,com.gameanalytics.sdk.events.EGASdkErrorArea,com.gameanalytics.sdk.events.EGASdkErrorAction,com.gameanalytics.sdk.events.EGASdkErrorParameter,java.lang.String) -> <init>
com.google.android.gms.common.annotation.KeepName -> com.google.android.gms.common.annotation.KeepName:
com.google.android.gms.common.api.internal.LifecycleActivity -> com.google.android.gms.common.api.internal.a:
com.google.android.gms.common.api.internal.LifecycleCallback -> com.google.android.gms.common.api.internal.LifecycleCallback:
    com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity) -> getChimeraLifecycleFragmentImpl
com.google.android.gms.common.api.internal.LifecycleFragment -> com.google.android.gms.common.api.internal.b:
com.google.android.gms.common.internal.ReflectedParcelable -> com.google.android.gms.common.internal.ReflectedParcelable:
com.google.android.gms.common.util.DynamiteApi -> com.google.android.gms.common.util.DynamiteApi:
com.google.android.gms.dynamite.DynamiteModule -> com.google.android.gms.dynamite.DynamiteModule:
    int zze -> g
    java.lang.ThreadLocal zzf -> h
    java.lang.ThreadLocal zzg -> i
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$zzb zzh -> j
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_REMOTE -> a
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_LOCAL -> b
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_REMOTE_VERSION_NO_FORCE_STAGING -> c
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION -> d
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING -> e
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_REMOTE_VERSION -> f
    com.google.android.gms.dynamite.DynamiteModule$VersionPolicy zzi -> k
    void <clinit>() -> <clinit>
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader -> com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader:
    java.lang.ClassLoader sClassLoader -> sClassLoader
    void <init>() -> <init>
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy -> com.google.android.gms.dynamite.DynamiteModule$a:
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$zzb -> com.google.android.gms.dynamite.DynamiteModule$a$a:
com.google.android.gms.dynamite.zza -> com.google.android.gms.dynamite.a:
    void <init>() -> <init>
    java.lang.Object initialValue() -> initialValue
com.google.android.gms.dynamite.zzb -> com.google.android.gms.dynamite.b:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzd -> com.google.android.gms.dynamite.c:
    void <init>() -> <init>
com.google.android.gms.dynamite.zze -> com.google.android.gms.dynamite.d:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzf -> com.google.android.gms.dynamite.e:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzg -> com.google.android.gms.dynamite.f:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzh -> com.google.android.gms.dynamite.g:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzi -> com.google.android.gms.dynamite.h:
    void <init>() -> <init>
com.google.android.gms.dynamite.zzj -> com.google.android.gms.dynamite.i:
    void <init>() -> <init>
com.google.androidgamesdk.ChoreographerCallback -> com.google.androidgamesdk.ChoreographerCallback:
    java.lang.String LOG_TAG -> LOG_TAG
    long mCookie -> mCookie
    com.google.androidgamesdk.ChoreographerCallback$a mLooper -> mLooper
    void <init>(long) -> <init>
    void postFrameCallback() -> postFrameCallback
    void postFrameCallbackDelayed(long) -> postFrameCallbackDelayed
    void terminate() -> terminate
    void doFrame(long) -> doFrame
    void nOnChoreographer(long,long) -> nOnChoreographer
com.google.androidgamesdk.ChoreographerCallback$1 -> com.google.androidgamesdk.ChoreographerCallback$1:
    com.google.androidgamesdk.ChoreographerCallback a -> a
    void <init>(com.google.androidgamesdk.ChoreographerCallback) -> <init>
    void run() -> run
com.google.androidgamesdk.ChoreographerCallback$a -> com.google.androidgamesdk.ChoreographerCallback$a:
    android.os.Handler a -> a
    com.google.androidgamesdk.ChoreographerCallback b -> b
    void <init>(com.google.androidgamesdk.ChoreographerCallback) -> <init>
    void run() -> run
    void <init>(com.google.androidgamesdk.ChoreographerCallback,byte) -> <init>
com.google.androidgamesdk.SwappyDisplayManager -> com.google.androidgamesdk.SwappyDisplayManager:
    java.lang.String LOG_TAG -> LOG_TAG
    boolean DEBUG -> DEBUG
    long ONE_MS_IN_NS -> ONE_MS_IN_NS
    long ONE_S_IN_NS -> ONE_S_IN_NS
    long mCookie -> mCookie
    android.app.Activity mActivity -> mActivity
    android.view.WindowManager mWindowManager -> mWindowManager
    android.view.Display$Mode mCurrentMode -> mCurrentMode
    com.google.androidgamesdk.SwappyDisplayManager$a mLooper -> mLooper
    boolean modeMatchesCurrentResolution(android.view.Display$Mode) -> modeMatchesCurrentResolution
    void <init>(long,android.app.Activity) -> <init>
    void updateSupportedRefreshRates(android.view.Display) -> updateSupportedRefreshRates
    void setPreferredRefreshRate(int) -> setPreferredRefreshRate
    void terminate() -> terminate
    void onDisplayAdded(int) -> onDisplayAdded
    void onDisplayRemoved(int) -> onDisplayRemoved
    void onDisplayChanged(int) -> onDisplayChanged
    boolean callNativeCallback() -> callNativeCallback
    void nSetSupportedRefreshRates(long,long[],int[]) -> nSetSupportedRefreshRates
    void nOnRefreshRateChanged(long,long,long,long) -> nOnRefreshRateChanged
    android.app.Activity access$100(com.google.androidgamesdk.SwappyDisplayManager) -> access$100
com.google.androidgamesdk.SwappyDisplayManager$1 -> com.google.androidgamesdk.SwappyDisplayManager$1:
    int a -> a
    com.google.androidgamesdk.SwappyDisplayManager b -> b
    void <init>(com.google.androidgamesdk.SwappyDisplayManager,int) -> <init>
    void run() -> run
com.google.androidgamesdk.SwappyDisplayManager$a -> com.google.androidgamesdk.SwappyDisplayManager$a:
    android.os.Handler a -> a
    java.util.concurrent.locks.Lock c -> c
    java.util.concurrent.locks.Condition d -> d
    com.google.androidgamesdk.SwappyDisplayManager b -> b
    void <init>(com.google.androidgamesdk.SwappyDisplayManager) -> <init>
    void start() -> start
    void run() -> run
    void <init>(com.google.androidgamesdk.SwappyDisplayManager,byte) -> <init>
com.unity3d.player.AssetPackManagerWrapper -> com.unity3d.player.AssetPackManagerWrapper:
    com.unity3d.player.AssetPackManagerWrapper a -> a
    com.google.android.play.core.assetpacks.AssetPackManager b -> b
    java.util.HashSet c -> c
    java.lang.Object d -> d
    void <init>(android.content.Context) -> <init>
    com.unity3d.player.AssetPackManagerWrapper getInstance() -> getInstance
    com.unity3d.player.AssetPackManagerWrapper init(android.content.Context) -> init
    void getAssetPackState(java.lang.String,com.unity3d.player.IAssetPackManagerStatusQueryCallback) -> getAssetPackState
    void getAssetPackStates(java.lang.String[],com.unity3d.player.IAssetPackManagerStatusQueryCallback) -> getAssetPackStates
    void downloadAssetPack(java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> downloadAssetPack
    void downloadAssetPacks(java.lang.String[],com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> downloadAssetPacks
    void a(java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper) -> a
    java.lang.Object registerDownloadStatusListener(com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> registerDownloadStatusListener
    void unregisterDownloadStatusListener(java.lang.Object) -> unregisterDownloadStatusListener
    void requestToUseMobileData(android.app.Activity,com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback) -> requestToUseMobileData
    java.lang.String getAssetPackPath(java.lang.String) -> getAssetPackPath
    void cancelAssetPackDownload(java.lang.String) -> cancelAssetPackDownload
    void cancelAssetPackDownloads(java.lang.String[]) -> cancelAssetPackDownloads
    void removeAssetPack(java.lang.String) -> removeAssetPack
    boolean playCoreApiMissing() -> playCoreApiMissing
    void b() -> b
    com.unity3d.player.AssetPackManagerWrapper a() -> a
    void a(com.unity3d.player.AssetPackManagerWrapper,java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper) -> a
    java.util.HashSet a(com.unity3d.player.AssetPackManagerWrapper) -> a
    java.lang.Object b(com.unity3d.player.AssetPackManagerWrapper) -> b
    java.lang.Object c(com.unity3d.player.AssetPackManagerWrapper) -> c
com.unity3d.player.AssetPackManagerWrapper$a -> com.unity3d.player.AssetPackManagerWrapper$a:
    java.util.Set a -> a
    java.lang.String b -> b
    int c -> c
    long d -> d
    long e -> e
    int f -> f
    int g -> g
    void <init>(java.util.Set,java.lang.String,int,long,long,int,int) -> <init>
    void run() -> run
com.unity3d.player.AssetPackManagerWrapper$b -> com.unity3d.player.AssetPackManagerWrapper$b:
    java.util.HashSet b -> b
    android.os.Looper c -> c
    com.unity3d.player.AssetPackManagerWrapper a -> a
    void <init>(com.unity3d.player.AssetPackManagerWrapper,com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> <init>
    void <init>(com.unity3d.player.AssetPackManagerWrapper,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper) -> <init>
    void a(com.google.android.play.core.assetpacks.AssetPackState) -> a
    void a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> a
    java.util.Set a(java.util.HashSet) -> a
    void onStateUpdate(java.lang.Object) -> onStateUpdate
com.unity3d.player.AssetPackManagerWrapper$c -> com.unity3d.player.AssetPackManagerWrapper$c:
    com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback a -> a
    android.os.Looper b -> b
    void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback) -> <init>
    void a(java.lang.Integer) -> a
    void onSuccess(java.lang.Object) -> onSuccess
com.unity3d.player.AssetPackManagerWrapper$c$a -> com.unity3d.player.AssetPackManagerWrapper$c$a:
    com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback a -> a
    boolean b -> b
    void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback,boolean) -> <init>
    void run() -> run
com.unity3d.player.AssetPackManagerWrapper$d -> com.unity3d.player.AssetPackManagerWrapper$d:
    com.unity3d.player.IAssetPackManagerDownloadStatusCallback a -> a
    android.os.Looper b -> b
    java.lang.String c -> c
    void <init>(com.unity3d.player.IAssetPackManagerDownloadStatusCallback,java.lang.String) -> <init>
    void onComplete(com.google.android.play.core.tasks.Task) -> onComplete
    void a(java.lang.String,int,int,long) -> a
com.unity3d.player.AssetPackManagerWrapper$e -> com.unity3d.player.AssetPackManagerWrapper$e:
    com.unity3d.player.IAssetPackManagerStatusQueryCallback a -> a
    android.os.Looper b -> b
    java.lang.String[] c -> c
    void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,java.lang.String[]) -> <init>
    void onComplete(com.google.android.play.core.tasks.Task) -> onComplete
com.unity3d.player.AssetPackManagerWrapper$e$a -> com.unity3d.player.AssetPackManagerWrapper$e$a:
    com.unity3d.player.IAssetPackManagerStatusQueryCallback a -> a
    long b -> b
    java.lang.String[] c -> c
    int[] d -> d
    int[] e -> e
    void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,long,java.lang.String[],int[],int[]) -> <init>
    void run() -> run
com.unity3d.player.AudioVolumeHandler -> com.unity3d.player.AudioVolumeHandler:
    com.unity3d.player.a a -> a
    void onAudioVolumeChanged(int) -> onAudioVolumeChanged
    void <init>(android.content.Context) -> <init>
    void a() -> a
com.unity3d.player.BuildConfig -> com.unity3d.player.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String LIBRARY_PACKAGE_NAME -> LIBRARY_PACKAGE_NAME
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
com.unity3d.player.Camera2Wrapper -> com.unity3d.player.Camera2Wrapper:
    android.content.Context a -> a
    com.unity3d.player.b b -> b
    int c -> c
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void initCamera2Jni() -> initCamera2Jni
    void deinitCamera2Jni() -> deinitCamera2Jni
    void nativeFrameReady(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> nativeFrameReady
    void nativeSurfaceTextureReady(java.lang.Object) -> nativeSurfaceTextureReady
    int getCamera2Count() -> getCamera2Count
    int getCamera2SensorOrientation(int) -> getCamera2SensorOrientation
    boolean isCamera2FrontFacing(int) -> isCamera2FrontFacing
    int getCamera2FocalLengthEquivalent(int) -> getCamera2FocalLengthEquivalent
    int[] getCamera2Resolutions(int) -> getCamera2Resolutions
    boolean initializeCamera2(int,int,int,int,int) -> initializeCamera2
    boolean isCamera2AutoFocusPointSupported(int) -> isCamera2AutoFocusPointSupported
    boolean setAutoFocusPoint(float,float) -> setAutoFocusPoint
    android.graphics.Rect getFrameSizeCamera2() -> getFrameSizeCamera2
    void closeCamera2() -> closeCamera2
    void startCamera2() -> startCamera2
    void pauseCamera2() -> pauseCamera2
    void stopCamera2() -> stopCamera2
    int a(float) -> a
    java.lang.Object getCameraFocusArea(float,float) -> getCameraFocusArea
    void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> a
    void a(java.lang.Object) -> a
com.unity3d.player.GoogleARCoreApi -> com.unity3d.player.GoogleARCoreApi:
    void <init>() -> <init>
    void initializeARCore(android.app.Activity) -> initializeARCore
    void pauseARCore() -> pauseARCore
    void resumeARCore() -> resumeARCore
com.unity3d.player.HFPStatus -> com.unity3d.player.HFPStatus:
    android.content.Context a -> a
    android.content.BroadcastReceiver b -> b
    android.content.Intent c -> c
    boolean d -> d
    android.media.AudioManager e -> e
    int f -> f
    void initHFPStatusJni() -> initHFPStatusJni
    void deinitHFPStatusJni() -> deinitHFPStatusJni
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void requestHFPStat() -> requestHFPStat
    boolean getHFPStat() -> getHFPStat
    boolean a(com.unity3d.player.HFPStatus) -> a
    android.media.AudioManager b(com.unity3d.player.HFPStatus) -> b
    boolean a(com.unity3d.player.HFPStatus,boolean) -> a
    int a(com.unity3d.player.HFPStatus,int) -> a
    int c(com.unity3d.player.HFPStatus) -> c
com.unity3d.player.HFPStatus$1 -> com.unity3d.player.HFPStatus$1:
    com.unity3d.player.HFPStatus a -> a
    void <init>(com.unity3d.player.HFPStatus) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.unity3d.player.HFPStatus$a -> com.unity3d.player.HFPStatus$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.IAssetPackManagerDownloadStatusCallback -> com.unity3d.player.IAssetPackManagerDownloadStatusCallback:
    void onStatusUpdate(java.lang.String,int,long,long,int,int) -> onStatusUpdate
com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback -> com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback:
    void onMobileDataConfirmationResult(boolean) -> onMobileDataConfirmationResult
com.unity3d.player.IAssetPackManagerStatusQueryCallback -> com.unity3d.player.IAssetPackManagerStatusQueryCallback:
    void onStatusResult(long,java.lang.String[],int[],int[]) -> onStatusResult
com.unity3d.player.IPermissionRequestCallbacks -> com.unity3d.player.IPermissionRequestCallbacks:
    void onPermissionGranted(java.lang.String) -> onPermissionGranted
    void onPermissionDenied(java.lang.String) -> onPermissionDenied
    void onPermissionDeniedAndDontAskAgain(java.lang.String) -> onPermissionDeniedAndDontAskAgain
com.unity3d.player.IUnityPlayerLifecycleEvents -> com.unity3d.player.IUnityPlayerLifecycleEvents:
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
com.unity3d.player.MultiWindowSupport -> com.unity3d.player.MultiWindowSupport:
    java.lang.String RESIZABLE_WINDOW -> RESIZABLE_WINDOW
    void <init>() -> <init>
    boolean isInMultiWindowMode(android.app.Activity) -> isInMultiWindowMode
    boolean getAllowResizableWindow(android.app.Activity) -> getAllowResizableWindow
com.unity3d.player.NativeLoader -> com.unity3d.player.NativeLoader:
    boolean load(java.lang.String) -> load
    boolean unload() -> unload
com.unity3d.player.NetworkConnectivity -> com.unity3d.player.NetworkConnectivity:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    android.net.ConnectivityManager e -> e
    android.net.ConnectivityManager$NetworkCallback f -> f
    int a() -> a
    void <init>(android.content.Context) -> <init>
    void b() -> b
    int a(com.unity3d.player.NetworkConnectivity,int) -> a
com.unity3d.player.NetworkConnectivity$1 -> com.unity3d.player.NetworkConnectivity$1:
    com.unity3d.player.NetworkConnectivity a -> a
    void <init>(com.unity3d.player.NetworkConnectivity) -> <init>
    void onAvailable(android.net.Network) -> onAvailable
    void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities) -> onCapabilitiesChanged
    void onUnavailable() -> onUnavailable
    void onLost(android.net.Network) -> onLost
com.unity3d.player.PlatformSupport -> com.unity3d.player.PlatformSupport:
    boolean LOLLIPOP_SUPPORT -> LOLLIPOP_SUPPORT
    boolean MARSHMALLOW_SUPPORT -> MARSHMALLOW_SUPPORT
    boolean NOUGAT_SUPPORT -> NOUGAT_SUPPORT
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.unity3d.player.R -> com.unity3d.player.R:
    void <init>() -> <init>
com.unity3d.player.R$integer -> com.unity3d.player.R$integer:
    int google_play_services_version -> google_play_services_version
    void <init>() -> <init>
com.unity3d.player.R$string -> com.unity3d.player.R$string:
    int app_name -> app_name
    int common_google_play_services_unknown_issue -> common_google_play_services_unknown_issue
    void <init>() -> <init>
com.unity3d.player.R$style -> com.unity3d.player.R$style:
    int BaseUnityTheme -> BaseUnityTheme
    int UnityThemeSelector -> UnityThemeSelector
    int UnityThemeSelector_Translucent -> UnityThemeSelector_Translucent
    void <init>() -> <init>
com.unity3d.player.ReflectionHelper -> com.unity3d.player.ReflectionHelper:
    boolean LOG -> LOG
    boolean LOGV -> LOGV
    com.unity3d.player.ReflectionHelper$a[] a -> a
    long b -> b
    void <init>() -> <init>
    boolean a(com.unity3d.player.ReflectionHelper$a) -> a
    void a(com.unity3d.player.ReflectionHelper$a,java.lang.reflect.Member) -> a
    java.lang.reflect.Constructor getConstructorID(java.lang.Class,java.lang.String) -> getConstructorID
    java.lang.reflect.Method getMethodID(java.lang.Class,java.lang.String,java.lang.String,boolean) -> getMethodID
    java.lang.reflect.Field getFieldID(java.lang.Class,java.lang.String,java.lang.String,boolean) -> getFieldID
    java.lang.String getFieldSignature(java.lang.reflect.Field) -> getFieldSignature
    float a(java.lang.Class,java.lang.Class) -> a
    float a(java.lang.Class,java.lang.Class[],java.lang.Class[]) -> a
    java.lang.Class[] a(java.lang.String) -> a
    java.lang.Class a(java.lang.String,int[]) -> a
    java.lang.Object nativeProxyInvoke(long,java.lang.String,java.lang.Object[]) -> nativeProxyInvoke
    void nativeProxyFinalize(long) -> nativeProxyFinalize
    void nativeProxyLogJNIInvokeException(long) -> nativeProxyLogJNIInvokeException
    void endUnityLaunch() -> endUnityLaunch
    java.lang.Object newProxyInstance(long,java.lang.Class) -> newProxyInstance
    void setNativeExceptionOnProxy(java.lang.Object,long,boolean) -> setNativeExceptionOnProxy
    java.lang.Object newProxyInstance(long,java.lang.Class[]) -> newProxyInstance
    long a() -> a
    void a(long) -> a
    java.lang.Object a(long,java.lang.String,java.lang.Object[]) -> a
    void b(long) -> b
    void <clinit>() -> <clinit>
com.unity3d.player.ReflectionHelper$1 -> com.unity3d.player.ReflectionHelper$1:
    long c -> c
    long d -> d
    boolean e -> e
    long a -> a
    java.lang.Class[] b -> b
    void <init>(long,java.lang.Class[]) -> <init>
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void a(long,boolean) -> a
    void finalize() -> finalize
com.unity3d.player.ReflectionHelper$a -> com.unity3d.player.ReflectionHelper$a:
    java.lang.Class b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    java.lang.reflect.Member a -> a
    void <init>(java.lang.Class,java.lang.String,java.lang.String) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.unity3d.player.ReflectionHelper$b -> com.unity3d.player.ReflectionHelper$b:
    void a(long,boolean) -> a
com.unity3d.player.UnityCoreAssetPacksStatusCallbacks -> com.unity3d.player.UnityCoreAssetPacksStatusCallbacks:
    void <init>() -> <init>
    void nativeStatusQueryResult(java.lang.String,int,int) -> nativeStatusQueryResult
    void onStatusResult(long,java.lang.String[],int[],int[]) -> onStatusResult
    void onStatusUpdate(java.lang.String,int,long,long,int,int) -> onStatusUpdate
com.unity3d.player.UnityPermissions -> com.unity3d.player.UnityPermissions:
    java.lang.String SKIP_DIALOG_METADATA_NAME -> SKIP_DIALOG_METADATA_NAME
    void <init>() -> <init>
    boolean checkInfoForMetadata(android.content.pm.PackageItemInfo) -> checkInfoForMetadata
    boolean skipPermissionsDialog(android.app.Activity) -> skipPermissionsDialog
    boolean hasUserAuthorizedPermission(android.app.Activity,java.lang.String) -> hasUserAuthorizedPermission
    void requestUserPermissions(android.app.Activity,java.lang.String[],com.unity3d.player.IPermissionRequestCallbacks) -> requestUserPermissions
com.unity3d.player.UnityPlayer -> com.unity3d.player.UnityPlayer:
    android.app.Activity currentActivity -> currentActivity
    int mInitialScreenOrientation -> mInitialScreenOrientation
    boolean mMainDisplayOverride -> mMainDisplayOverride
    boolean mIsFullscreen -> mIsFullscreen
    com.unity3d.player.j mState -> mState
    java.util.concurrent.ConcurrentLinkedQueue m_Events -> m_Events
    android.content.BroadcastReceiver mKillingIsMyBusiness -> mKillingIsMyBusiness
    android.view.OrientationEventListener mOrientationListener -> mOrientationListener
    int mNaturalOrientation -> mNaturalOrientation
    int ANR_TIMEOUT_SECONDS -> ANR_TIMEOUT_SECONDS
    int RUN_STATE_CHANGED_MSG_CODE -> RUN_STATE_CHANGED_MSG_CODE
    com.unity3d.player.UnityPlayer$e m_MainThread -> m_MainThread
    boolean m_AddPhoneCallListener -> m_AddPhoneCallListener
    com.unity3d.player.UnityPlayer$c m_PhoneCallListener -> m_PhoneCallListener
    android.telephony.TelephonyManager m_TelephonyManager -> m_TelephonyManager
    android.content.ClipboardManager m_ClipboardManager -> m_ClipboardManager
    com.unity3d.player.h m_SplashScreen -> m_SplashScreen
    com.unity3d.player.f m_PersistentUnitySurface -> m_PersistentUnitySurface
    com.unity3d.player.GoogleARCoreApi m_ARCoreApi -> m_ARCoreApi
    com.unity3d.player.UnityPlayer$a m_FakeListener -> m_FakeListener
    com.unity3d.player.Camera2Wrapper m_Camera2Wrapper -> m_Camera2Wrapper
    com.unity3d.player.HFPStatus m_HFPStatus -> m_HFPStatus
    com.unity3d.player.AudioVolumeHandler m_AudioVolumeHandler -> m_AudioVolumeHandler
    android.net.Uri m_launchUri -> m_launchUri
    com.unity3d.player.NetworkConnectivity m_NetworkConnectivity -> m_NetworkConnectivity
    com.unity3d.player.IUnityPlayerLifecycleEvents m_UnityPlayerLifecycleEvents -> m_UnityPlayerLifecycleEvents
    android.content.Context mContext -> mContext
    android.view.SurfaceView mGlView -> mGlView
    boolean mQuitting -> mQuitting
    boolean mProcessKillRequested -> mProcessKillRequested
    com.unity3d.player.l mVideoPlayerProxy -> mVideoPlayerProxy
    com.unity3d.player.g mSoftInputDialog -> mSoftInputDialog
    java.lang.String SPLASH_ENABLE_METADATA_NAME -> SPLASH_ENABLE_METADATA_NAME
    java.lang.String SPLASH_MODE_METADATA_NAME -> SPLASH_MODE_METADATA_NAME
    java.lang.String ARCORE_ENABLE_METADATA_NAME -> ARCORE_ENABLE_METADATA_NAME
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,com.unity3d.player.IUnityPlayerLifecycleEvents) -> <init>
    int getNaturalOrientation(int) -> getNaturalOrientation
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
    void toggleGyroscopeSensor(boolean) -> toggleGyroscopeSensor
    java.lang.String GetGlViewContentDescription(android.content.Context) -> GetGlViewContentDescription
    void DisableStaticSplashScreen() -> DisableStaticSplashScreen
    void EarlyEnableFullScreenIfVrLaunched(android.app.Activity) -> EarlyEnableFullScreenIfVrLaunched
    boolean IsWindowTranslucent() -> IsWindowTranslucent
    android.view.SurfaceView CreateGlView() -> CreateGlView
    void sendSurfaceChangedEvent() -> sendSurfaceChangedEvent
    void updateGLDisplay(int,android.view.Surface) -> updateGLDisplay
    boolean updateDisplayInternal(int,android.view.Surface) -> updateDisplayInternal
    boolean displayChanged(int,android.view.Surface) -> displayChanged
    void UnitySendMessage(java.lang.String,java.lang.String,java.lang.String) -> UnitySendMessage
    void nativeUnitySendMessage(java.lang.String,java.lang.String,byte[]) -> nativeUnitySendMessage
    void finish() -> finish
    void runOnAnonymousThread(java.lang.Runnable) -> runOnAnonymousThread
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void postOnUiThread(java.lang.Runnable) -> postOnUiThread
    void init(int,boolean) -> init
    android.view.View getView() -> getView
    android.os.Bundle getSettings() -> getSettings
    void quit() -> quit
    void newIntent(android.content.Intent) -> newIntent
    void destroy() -> destroy
    void kill() -> kill
    void pause() -> pause
    void pauseUnity() -> pauseUnity
    void resume() -> resume
    void lowMemory() -> lowMemory
    void shutdown() -> shutdown
    void unload() -> unload
    void checkResumePlayer() -> checkResumePlayer
    boolean skipPermissionsDialog() -> skipPermissionsDialog
    void requestUserAuthorization(java.lang.String) -> requestUserAuthorization
    int getNetworkConnectivity() -> getNetworkConnectivity
    void configurationChanged(android.content.res.Configuration) -> configurationChanged
    void windowFocusChanged(boolean) -> windowFocusChanged
    boolean loadLibrary(java.lang.String) -> loadLibrary
    void addPhoneCallListener() -> addPhoneCallListener
    void initJni(android.content.Context) -> initJni
    boolean nativeRender() -> nativeRender
    void nativeSetInputArea(int,int,int,int) -> nativeSetInputArea
    void nativeSetKeyboardIsVisible(boolean) -> nativeSetKeyboardIsVisible
    void nativeSetInputString(java.lang.String) -> nativeSetInputString
    void nativeSetInputSelection(int,int) -> nativeSetInputSelection
    void nativeSoftInputCanceled() -> nativeSoftInputCanceled
    void nativeSoftInputLostFocus() -> nativeSoftInputLostFocus
    void nativeReportKeyboardConfigChanged() -> nativeReportKeyboardConfigChanged
    boolean nativePause() -> nativePause
    void nativeResume() -> nativeResume
    void nativeLowMemory() -> nativeLowMemory
    void nativeApplicationUnload() -> nativeApplicationUnload
    void nativeFocusChanged(boolean) -> nativeFocusChanged
    void nativeRecreateGfxState(int,android.view.Surface) -> nativeRecreateGfxState
    void nativeSendSurfaceChangedEvent() -> nativeSendSurfaceChangedEvent
    boolean nativeDone() -> nativeDone
    void nativeSoftInputClosed() -> nativeSoftInputClosed
    boolean nativeInjectEvent(android.view.InputEvent) -> nativeInjectEvent
    boolean nativeIsAutorotationOn() -> nativeIsAutorotationOn
    void nativeMuteMasterAudio(boolean) -> nativeMuteMasterAudio
    void nativeRestartActivityIndicator() -> nativeRestartActivityIndicator
    void nativeSetLaunchURL(java.lang.String) -> nativeSetLaunchURL
    void nativeOrientationChanged(int,int) -> nativeOrientationChanged
    java.lang.String logLoadLibMainError(java.lang.String,java.lang.String) -> logLoadLibMainError
    java.lang.String loadNative(java.lang.String) -> loadNative
    void unloadNative() -> unloadNative
    java.lang.String getUnityNativeLibraryPath(android.content.Context) -> getUnityNativeLibraryPath
    void showSoftInput(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean) -> showSoftInput
    void hideSoftInput() -> hideSoftInput
    void setSoftInputStr(java.lang.String) -> setSoftInputStr
    void setCharacterLimit(int) -> setCharacterLimit
    void setHideInputField(boolean) -> setHideInputField
    void setSelection(int,int) -> setSelection
    java.lang.String getKeyboardLayout() -> getKeyboardLayout
    void reportSoftInputStr(java.lang.String,int,boolean) -> reportSoftInputStr
    void reportSoftInputSelection(int,int) -> reportSoftInputSelection
    void reportSoftInputArea(android.graphics.Rect) -> reportSoftInputArea
    void reportSoftInputIsVisible(boolean) -> reportSoftInputIsVisible
    void setClipboardText(java.lang.String) -> setClipboardText
    java.lang.String getClipboardText() -> getClipboardText
    java.lang.String getLaunchURL() -> getLaunchURL
    boolean initializeGoogleAr() -> initializeGoogleAr
    boolean showVideoPlayer(java.lang.String,int,int,int,boolean,int,int) -> showVideoPlayer
    void pauseJavaAndCallUnloadCallback() -> pauseJavaAndCallUnloadCallback
    android.content.pm.ApplicationInfo getApplicationInfo() -> getApplicationInfo
    boolean getSplashEnabled() -> getSplashEnabled
    boolean getARCoreEnabled() -> getARCoreEnabled
    int getSplashMode() -> getSplashMode
    void executeGLThreadJobs() -> executeGLThreadJobs
    void disableLogger() -> disableLogger
    void queueGLThreadEvent(java.lang.Runnable) -> queueGLThreadEvent
    void queueGLThreadEvent(com.unity3d.player.UnityPlayer$f) -> queueGLThreadEvent
    boolean isFinishing() -> isFinishing
    void hideStatusBar() -> hideStatusBar
    boolean injectEvent(android.view.InputEvent) -> injectEvent
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyMultiple(int,int,android.view.KeyEvent) -> onKeyMultiple
    boolean onKeyLongPress(int,android.view.KeyEvent) -> onKeyLongPress
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void swapViews(android.view.View,android.view.View) -> swapViews
    boolean addViewToPlayer(android.view.View,boolean) -> addViewToPlayer
    void removeViewFromPlayer(android.view.View) -> removeViewFromPlayer
    void reportError(java.lang.String,java.lang.String) -> reportError
    java.lang.String getNetworkProxySettings(java.lang.String) -> getNetworkProxySettings
    boolean startOrientationListener(int) -> startOrientationListener
    boolean stopOrientationListener() -> stopOrientationListener
    void access$000(com.unity3d.player.UnityPlayer,boolean) -> access$000
    boolean access$100(com.unity3d.player.UnityPlayer) -> access$100
    void access$200(com.unity3d.player.UnityPlayer) -> access$200
    boolean access$300(com.unity3d.player.UnityPlayer) -> access$300
    void access$400(com.unity3d.player.UnityPlayer) -> access$400
    void access$500(com.unity3d.player.UnityPlayer,java.lang.String) -> access$500
    void access$600(com.unity3d.player.UnityPlayer,int,int) -> access$600
    void access$800(com.unity3d.player.UnityPlayer,boolean) -> access$800
    com.unity3d.player.h access$1000(com.unity3d.player.UnityPlayer) -> access$1000
    com.unity3d.player.h access$1002(com.unity3d.player.UnityPlayer,com.unity3d.player.h) -> access$1002
    void access$1100(com.unity3d.player.UnityPlayer,int,android.view.Surface) -> access$1100
    com.unity3d.player.f access$1200(com.unity3d.player.UnityPlayer) -> access$1200
    void access$1300(com.unity3d.player.UnityPlayer) -> access$1300
    android.view.SurfaceView access$1400(com.unity3d.player.UnityPlayer) -> access$1400
    void access$1500(com.unity3d.player.UnityPlayer) -> access$1500
    void access$1600(com.unity3d.player.UnityPlayer,int,android.view.Surface) -> access$1600
    boolean access$1700(com.unity3d.player.UnityPlayer) -> access$1700
    void access$1800(com.unity3d.player.UnityPlayer) -> access$1800
    boolean access$1900(com.unity3d.player.UnityPlayer) -> access$1900
    boolean access$2002(com.unity3d.player.UnityPlayer,boolean) -> access$2002
    void access$2100(com.unity3d.player.UnityPlayer) -> access$2100
    void access$2200(com.unity3d.player.UnityPlayer) -> access$2200
    android.content.Context access$2300(com.unity3d.player.UnityPlayer) -> access$2300
    void access$2400(com.unity3d.player.UnityPlayer) -> access$2400
    void access$2500(com.unity3d.player.UnityPlayer) -> access$2500
    void access$2700(com.unity3d.player.UnityPlayer) -> access$2700
    void access$2800(com.unity3d.player.UnityPlayer,java.lang.String) -> access$2800
    void access$2900(com.unity3d.player.UnityPlayer) -> access$2900
    void access$3000(com.unity3d.player.UnityPlayer,int,int) -> access$3000
    void access$3100(com.unity3d.player.UnityPlayer,int,int,int,int) -> access$3100
    void access$3200(com.unity3d.player.UnityPlayer,boolean) -> access$3200
    com.unity3d.player.l access$3302(com.unity3d.player.UnityPlayer,com.unity3d.player.l) -> access$3302
    boolean access$3400(com.unity3d.player.UnityPlayer) -> access$3400
    int access$3500(com.unity3d.player.UnityPlayer) -> access$3500
    com.unity3d.player.IUnityPlayerLifecycleEvents access$3600(com.unity3d.player.UnityPlayer) -> access$3600
    int access$3700(com.unity3d.player.UnityPlayer) -> access$3700
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$1 -> com.unity3d.player.UnityPlayer$1:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.unity3d.player.UnityPlayer$10 -> com.unity3d.player.UnityPlayer$10:
    boolean a -> a
    java.lang.String b -> b
    int c -> c
    com.unity3d.player.UnityPlayer d -> d
    void <init>(com.unity3d.player.UnityPlayer,boolean,java.lang.String,int) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$11 -> com.unity3d.player.UnityPlayer$11:
    int a -> a
    int b -> b
    com.unity3d.player.UnityPlayer c -> c
    void <init>(com.unity3d.player.UnityPlayer,int,int) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$12 -> com.unity3d.player.UnityPlayer$12:
    android.graphics.Rect a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,android.graphics.Rect) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$13 -> com.unity3d.player.UnityPlayer$13:
    boolean a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,boolean) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$14 -> com.unity3d.player.UnityPlayer$14:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$15 -> com.unity3d.player.UnityPlayer$15:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$16 -> com.unity3d.player.UnityPlayer$16:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$17 -> com.unity3d.player.UnityPlayer$17:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer,android.content.Context,int) -> <init>
    void onOrientationChanged(int) -> onOrientationChanged
com.unity3d.player.UnityPlayer$18 -> com.unity3d.player.UnityPlayer$18:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$19 -> com.unity3d.player.UnityPlayer$19:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
com.unity3d.player.UnityPlayer$2 -> com.unity3d.player.UnityPlayer$2:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$20 -> com.unity3d.player.UnityPlayer$20:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$21 -> com.unity3d.player.UnityPlayer$21:
    int a -> a
    android.view.Surface b -> b
    java.util.concurrent.Semaphore c -> c
    com.unity3d.player.UnityPlayer d -> d
    void <init>(com.unity3d.player.UnityPlayer,int,android.view.Surface,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$22 -> com.unity3d.player.UnityPlayer$22:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$23 -> com.unity3d.player.UnityPlayer$23:
    java.util.concurrent.Semaphore a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$24 -> com.unity3d.player.UnityPlayer$24:
    java.util.concurrent.Semaphore a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$3 -> com.unity3d.player.UnityPlayer$3:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$3$1 -> com.unity3d.player.UnityPlayer$3$1:
    com.unity3d.player.UnityPlayer$3 a -> a
    void <init>(com.unity3d.player.UnityPlayer$3) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$4 -> com.unity3d.player.UnityPlayer$4:
    com.unity3d.player.UnityPlayer a -> a
    java.lang.String b -> b
    int c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    java.lang.String h -> h
    int i -> i
    boolean j -> j
    com.unity3d.player.UnityPlayer k -> k
    void <init>(com.unity3d.player.UnityPlayer,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$4$1 -> com.unity3d.player.UnityPlayer$4$1:
    com.unity3d.player.UnityPlayer$4 a -> a
    void <init>(com.unity3d.player.UnityPlayer$4) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
com.unity3d.player.UnityPlayer$5 -> com.unity3d.player.UnityPlayer$5:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$6 -> com.unity3d.player.UnityPlayer$6:
    java.lang.String a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.lang.String) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$7 -> com.unity3d.player.UnityPlayer$7:
    int a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,int) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$8 -> com.unity3d.player.UnityPlayer$8:
    boolean a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,boolean) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$9 -> com.unity3d.player.UnityPlayer$9:
    int a -> a
    int b -> b
    com.unity3d.player.UnityPlayer c -> c
    void <init>(com.unity3d.player.UnityPlayer,int,int) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$a -> com.unity3d.player.UnityPlayer$a:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.unity3d.player.UnityPlayer$b -> com.unity3d.player.UnityPlayer$b:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$c -> com.unity3d.player.UnityPlayer$c:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayer$d -> com.unity3d.player.UnityPlayer$d:
    com.unity3d.player.UnityPlayer$d a -> a
    com.unity3d.player.UnityPlayer$d b -> b
    com.unity3d.player.UnityPlayer$d c -> c
    com.unity3d.player.UnityPlayer$d d -> d
    com.unity3d.player.UnityPlayer$d e -> e
    com.unity3d.player.UnityPlayer$d f -> f
    com.unity3d.player.UnityPlayer$d g -> g
    com.unity3d.player.UnityPlayer$d h -> h
    com.unity3d.player.UnityPlayer$d i -> i
    com.unity3d.player.UnityPlayer$d j -> j
    com.unity3d.player.UnityPlayer$d[] k -> k
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$e -> com.unity3d.player.UnityPlayer$e:
    android.os.Handler a -> a
    boolean b -> b
    boolean c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    com.unity3d.player.UnityPlayer i -> i
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
    void a() -> a
    void b() -> b
    void a(java.lang.Runnable) -> a
    void c() -> c
    void d() -> d
    void b(java.lang.Runnable) -> b
    void c(java.lang.Runnable) -> c
    void d(java.lang.Runnable) -> d
    void e() -> e
    void a(com.unity3d.player.UnityPlayer$d) -> a
    void a(int,int) -> a
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayer$e$1 -> com.unity3d.player.UnityPlayer$e$1:
    com.unity3d.player.UnityPlayer$e a -> a
    void <init>(com.unity3d.player.UnityPlayer$e) -> <init>
    void a() -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.unity3d.player.UnityPlayer$f -> com.unity3d.player.UnityPlayer$f:
    com.unity3d.player.UnityPlayer e -> e
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
    void a() -> a
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayerActivity -> com.unity3d.player.UnityPlayerActivity:
    com.unity3d.player.UnityPlayer mUnityPlayer -> mUnityPlayer
    void <init>() -> <init>
    java.lang.String updateUnityCommandLineArguments(java.lang.String) -> updateUnityCommandLineArguments
    void onCreate(android.os.Bundle) -> onCreate
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onDestroy() -> onDestroy
    void onStop() -> onStop
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onLowMemory() -> onLowMemory
    void onTrimMemory(int) -> onTrimMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
com.unity3d.player.a -> com.unity3d.player.a:
    android.content.Context a -> a
    android.media.AudioManager b -> b
    com.unity3d.player.a$a c -> c
    void <init>(android.content.Context) -> <init>
    void a(com.unity3d.player.a$b) -> a
    void a() -> a
com.unity3d.player.a$a -> com.unity3d.player.a$a:
    com.unity3d.player.a$b b -> b
    android.media.AudioManager c -> c
    int d -> d
    int e -> e
    com.unity3d.player.a a -> a
    void <init>(com.unity3d.player.a,android.os.Handler,android.media.AudioManager,int,com.unity3d.player.a$b) -> <init>
    void onChange(boolean,android.net.Uri) -> onChange
    boolean deliverSelfNotifications() -> deliverSelfNotifications
com.unity3d.player.a$b -> com.unity3d.player.a$b:
    void onAudioVolumeChanged(int) -> onAudioVolumeChanged
com.unity3d.player.b -> com.unity3d.player.b:
    com.unity3d.player.c a -> a
    android.hardware.camera2.CameraManager b -> b
    java.lang.String[] c -> c
    android.hardware.camera2.CameraDevice d -> d
    java.util.concurrent.Semaphore e -> e
    android.os.HandlerThread f -> f
    android.os.Handler g -> g
    android.graphics.Rect h -> h
    android.graphics.Rect i -> i
    int j -> j
    int k -> k
    float l -> l
    float m -> m
    int n -> n
    int o -> o
    boolean p -> p
    android.util.Range q -> q
    android.media.ImageReader r -> r
    android.media.Image s -> s
    android.hardware.camera2.CaptureRequest$Builder t -> t
    android.hardware.camera2.CameraCaptureSession u -> u
    java.lang.Object v -> v
    int w -> w
    android.graphics.SurfaceTexture x -> x
    android.view.Surface y -> y
    int z -> z
    android.hardware.camera2.CameraCaptureSession$CaptureCallback A -> A
    android.hardware.camera2.CameraDevice$StateCallback B -> B
    android.media.ImageReader$OnImageAvailableListener C -> C
    android.graphics.SurfaceTexture$OnFrameAvailableListener D -> D
    void <init>(com.unity3d.player.c) -> <init>
    android.hardware.camera2.CameraManager b(android.content.Context) -> b
    java.lang.String[] c(android.content.Context) -> c
    int a(android.content.Context) -> a
    int a(android.content.Context,int) -> a
    boolean b(android.content.Context,int) -> b
    boolean c(android.content.Context,int) -> c
    int d(android.content.Context,int) -> d
    android.util.Size[] a(android.hardware.camera2.CameraCharacteristics) -> a
    int[] e(android.content.Context,int) -> e
    void g() -> g
    void h() -> h
    boolean a(android.content.Context,int,int,int,int,int) -> a
    void b(android.hardware.camera2.CameraCharacteristics) -> b
    boolean a(float,float) -> a
    android.graphics.Rect a() -> a
    void b() -> b
    void i() -> i
    void a(java.lang.Object) -> a
    void j() -> j
    void k() -> k
    void c() -> c
    void d() -> d
    void e() -> e
    void a(android.hardware.camera2.CameraDevice) -> a
    android.graphics.Rect a(android.util.Size[],double,double) -> a
    int a(android.util.Range[],int) -> a
    void a(com.unity3d.player.b,java.lang.Object) -> a
    android.hardware.camera2.CameraDevice a(com.unity3d.player.b) -> a
    java.lang.Object b(com.unity3d.player.b) -> b
    android.hardware.camera2.CameraCaptureSession a(com.unity3d.player.b,android.hardware.camera2.CameraCaptureSession) -> a
    android.hardware.camera2.CaptureRequest$Builder a(com.unity3d.player.b,android.hardware.camera2.CaptureRequest$Builder) -> a
    android.view.Surface c(com.unity3d.player.b) -> c
    android.hardware.camera2.CaptureRequest$Builder d(com.unity3d.player.b) -> d
    android.media.ImageReader e(com.unity3d.player.b) -> e
    android.util.Range f(com.unity3d.player.b) -> f
    void g(com.unity3d.player.b) -> g
    android.hardware.camera2.CameraDevice a(com.unity3d.player.b,android.hardware.camera2.CameraDevice) -> a
    java.util.concurrent.Semaphore f() -> f
    void b(com.unity3d.player.b,android.hardware.camera2.CameraDevice) -> b
    com.unity3d.player.c h(com.unity3d.player.b) -> h
    android.media.Image i(com.unity3d.player.b) -> i
    android.media.Image a(com.unity3d.player.b,android.media.Image) -> a
    void <clinit>() -> <clinit>
com.unity3d.player.b$1 -> com.unity3d.player.b$1:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult) -> onCaptureCompleted
    void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure) -> onCaptureFailed
    void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long) -> onCaptureSequenceCompleted
    void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int) -> onCaptureSequenceAborted
com.unity3d.player.b$2 -> com.unity3d.player.b$2:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onConfigured(android.hardware.camera2.CameraCaptureSession) -> onConfigured
    void onConfigureFailed(android.hardware.camera2.CameraCaptureSession) -> onConfigureFailed
com.unity3d.player.b$3 -> com.unity3d.player.b$3:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onOpened(android.hardware.camera2.CameraDevice) -> onOpened
    void onClosed(android.hardware.camera2.CameraDevice) -> onClosed
    void onDisconnected(android.hardware.camera2.CameraDevice) -> onDisconnected
    void onError(android.hardware.camera2.CameraDevice,int) -> onError
com.unity3d.player.b$4 -> com.unity3d.player.b$4:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onImageAvailable(android.media.ImageReader) -> onImageAvailable
com.unity3d.player.b$5 -> com.unity3d.player.b$5:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
com.unity3d.player.b$a -> com.unity3d.player.b$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.c -> com.unity3d.player.c:
    void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> a
    void a(java.lang.Object) -> a
com.unity3d.player.d -> com.unity3d.player.d:
    boolean a -> a
    void Log(int,java.lang.String) -> Log
    void <clinit>() -> <clinit>
com.unity3d.player.e -> com.unity3d.player.e:
    com.unity3d.player.IPermissionRequestCallbacks a -> a
    android.app.Activity b -> b
    android.os.Looper c -> c
    void <init>() -> <init>
    void <init>(android.app.Activity,com.unity3d.player.IPermissionRequestCallbacks) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
com.unity3d.player.e$a -> com.unity3d.player.e$a:
    com.unity3d.player.IPermissionRequestCallbacks b -> b
    java.lang.String c -> c
    int d -> d
    boolean e -> e
    com.unity3d.player.e a -> a
    void <init>(com.unity3d.player.e,com.unity3d.player.IPermissionRequestCallbacks,java.lang.String,int,boolean) -> <init>
    void run() -> run
com.unity3d.player.f -> com.unity3d.player.f:
    java.lang.ref.WeakReference a -> a
    android.app.Activity b -> b
    android.view.View c -> c
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void a(android.view.SurfaceView) -> a
    void a(android.view.ViewGroup) -> a
    void b(android.view.ViewGroup) -> b
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityStopped(android.app.Activity) -> onActivityStopped
com.unity3d.player.f$a -> com.unity3d.player.f$a:
    android.graphics.Bitmap a -> a
    com.unity3d.player.f b -> b
    void <init>(com.unity3d.player.f,android.content.Context) -> <init>
    void onPixelCopyFinished(int) -> onPixelCopyFinished
    void a(android.view.SurfaceView) -> a
com.unity3d.player.g -> com.unity3d.player.g:
    android.content.Context a -> a
    com.unity3d.player.UnityPlayer b -> b
    int c -> c
    int d -> d
    int e -> e
    void <init>(android.content.Context,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int,boolean) -> <init>
    void a(boolean) -> a
    void a(android.widget.EditText,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int) -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    int a(int,boolean,boolean,boolean) -> a
    void a(java.lang.String,boolean) -> a
    void onClick(android.view.View) -> onClick
    void onBackPressed() -> onBackPressed
    android.view.View createSoftInputView() -> createSoftInputView
    java.lang.String b() -> b
    void a(java.lang.String) -> a
    void a(int) -> a
    void a(int,int) -> a
    java.lang.String a() -> a
    com.unity3d.player.UnityPlayer a(com.unity3d.player.g) -> a
    java.lang.String b(com.unity3d.player.g) -> b
    void a(com.unity3d.player.g,java.lang.String,boolean) -> a
    android.content.Context c(com.unity3d.player.g) -> c
    void <clinit>() -> <clinit>
com.unity3d.player.g$1 -> com.unity3d.player.g$1:
    android.view.View a -> a
    com.unity3d.player.g b -> b
    void <init>(com.unity3d.player.g,android.view.View) -> <init>
    void onGlobalLayout() -> onGlobalLayout
com.unity3d.player.g$2 -> com.unity3d.player.g$2:
    com.unity3d.player.g a -> a
    void <init>(com.unity3d.player.g) -> <init>
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unity3d.player.g$3 -> com.unity3d.player.g$3:
    com.unity3d.player.g a -> a
    void <init>(com.unity3d.player.g,android.content.Context) -> <init>
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onSelectionChanged(int,int) -> onSelectionChanged
com.unity3d.player.g$4 -> com.unity3d.player.g$4:
    com.unity3d.player.g a -> a
    void <init>(com.unity3d.player.g) -> <init>
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.unity3d.player.h -> com.unity3d.player.h:
    int a -> a
    int b -> b
    android.graphics.Bitmap c -> c
    android.graphics.Bitmap d -> d
    void <init>(android.content.Context,int) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
com.unity3d.player.h$1 -> com.unity3d.player.h$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.unity3d.player.h$a -> com.unity3d.player.h$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    int[] a() -> a
    void <clinit>() -> <clinit>
com.unity3d.player.i -> com.unity3d.player.i:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    void <init>() -> <init>
    boolean a() -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.unity3d.player.j -> com.unity3d.player.j:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    void <init>() -> <init>
    void a() -> a
    void b() -> b
    boolean c() -> c
    void a(boolean) -> a
    void b(boolean) -> b
    boolean d() -> d
    void c(boolean) -> c
    boolean e() -> e
    void d(boolean) -> d
    boolean e(boolean) -> e
    boolean f() -> f
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.unity3d.player.k -> com.unity3d.player.k:
    boolean a -> a
    android.content.Context b -> b
    android.view.SurfaceView c -> c
    android.view.SurfaceHolder d -> d
    java.lang.String e -> e
    int f -> f
    int g -> g
    boolean h -> h
    long i -> i
    long j -> j
    android.widget.FrameLayout k -> k
    android.view.Display l -> l
    int m -> m
    int n -> n
    int o -> o
    int p -> p
    android.media.MediaPlayer q -> q
    android.widget.MediaController r -> r
    boolean s -> s
    boolean t -> t
    int u -> u
    boolean v -> v
    boolean w -> w
    com.unity3d.player.k$a x -> x
    com.unity3d.player.k$b y -> y
    int z -> z
    void b(java.lang.String) -> b
    void <init>(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.k$a) -> <init>
    boolean a() -> a
    void a(int) -> a
    void destroyPlayer() -> destroyPlayer
    void c() -> c
    void CancelOnPrepare() -> CancelOnPrepare
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onBufferingUpdate(android.media.MediaPlayer,int) -> onBufferingUpdate
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onVideoSizeChanged(android.media.MediaPlayer,int,int) -> onVideoSizeChanged
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void doCleanUp() -> doCleanUp
    void d() -> d
    void updateVideoLayout() -> updateVideoLayout
    boolean canPause() -> canPause
    boolean canSeekBackward() -> canSeekBackward
    boolean canSeekForward() -> canSeekForward
    int getBufferPercentage() -> getBufferPercentage
    int getCurrentPosition() -> getCurrentPosition
    int getDuration() -> getDuration
    boolean isPlaying() -> isPlaying
    void pause() -> pause
    void seekTo(int) -> seekTo
    void start() -> start
    int getAudioSessionId() -> getAudioSessionId
    boolean b() -> b
    void a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.unity3d.player.k$a -> com.unity3d.player.k$a:
    void a(int) -> a
com.unity3d.player.k$b -> com.unity3d.player.k$b:
    com.unity3d.player.k b -> b
    boolean c -> c
    com.unity3d.player.k a -> a
    void <init>(com.unity3d.player.k,com.unity3d.player.k) -> <init>
    void run() -> run
    void a() -> a
com.unity3d.player.l -> com.unity3d.player.l:
    com.unity3d.player.UnityPlayer a -> a
    android.content.Context b -> b
    com.unity3d.player.l$a c -> c
    java.util.concurrent.Semaphore d -> d
    java.util.concurrent.locks.Lock e -> e
    com.unity3d.player.k f -> f
    int g -> g
    boolean h -> h
    boolean i -> i
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    boolean a(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.l$a) -> a
    void d() -> d
    void a() -> a
    void b() -> b
    void c() -> c
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    com.unity3d.player.k a(com.unity3d.player.l) -> a
    int a(com.unity3d.player.l,int) -> a
    java.util.concurrent.Semaphore b(com.unity3d.player.l) -> b
    com.unity3d.player.k a(com.unity3d.player.l,com.unity3d.player.k) -> a
    android.content.Context c(com.unity3d.player.l) -> c
    java.util.concurrent.locks.Lock d(com.unity3d.player.l) -> d
    boolean e(com.unity3d.player.l) -> e
    void f(com.unity3d.player.l) -> f
    com.unity3d.player.UnityPlayer g(com.unity3d.player.l) -> g
    boolean h(com.unity3d.player.l) -> h
com.unity3d.player.l$1 -> com.unity3d.player.l$1:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    boolean e -> e
    long f -> f
    long g -> g
    com.unity3d.player.l h -> h
    void <init>(com.unity3d.player.l,java.lang.String,int,int,int,boolean,long,long) -> <init>
    void run() -> run
com.unity3d.player.l$1$1 -> com.unity3d.player.l$1$1:
    com.unity3d.player.l$1 a -> a
    void <init>(com.unity3d.player.l$1) -> <init>
    void a(int) -> a
com.unity3d.player.l$1$1$1 -> com.unity3d.player.l$1$1$1:
    com.unity3d.player.l$1$1 a -> a
    void <init>(com.unity3d.player.l$1$1) -> <init>
    void run() -> run
com.unity3d.player.l$2 -> com.unity3d.player.l$2:
    com.unity3d.player.l a -> a
    void <init>(com.unity3d.player.l) -> <init>
    void run() -> run
com.unity3d.player.l$3 -> com.unity3d.player.l$3:
    com.unity3d.player.l a -> a
    void <init>(com.unity3d.player.l) -> <init>
    void run() -> run
com.unity3d.player.l$4 -> com.unity3d.player.l$4:
    com.unity3d.player.l a -> a
    void <init>(com.unity3d.player.l) -> <init>
    void run() -> run
com.unity3d.player.l$a -> com.unity3d.player.l$a:
    void a() -> a
org.fmod.FMODAudioDevice -> org.fmod.FMODAudioDevice:
    java.lang.Thread a -> a
    boolean b -> b
    android.media.AudioTrack c -> c
    boolean d -> d
    java.nio.ByteBuffer e -> e
    byte[] f -> f
    org.fmod.a g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void close() -> close
    boolean isRunning() -> isRunning
    void run() -> run
    void releaseAudioTrack() -> releaseAudioTrack
    int fmodGetInfo(int) -> fmodGetInfo
    int fmodProcess(java.nio.ByteBuffer) -> fmodProcess
    int fmodProcessMicData(java.nio.ByteBuffer,int) -> fmodProcessMicData
    int startAudioRecord(int,int,int) -> startAudioRecord
    void stopAudioRecord() -> stopAudioRecord
    void <clinit>() -> <clinit>
org.fmod.a -> org.fmod.a:
    org.fmod.FMODAudioDevice a -> a
    java.nio.ByteBuffer b -> b
    int c -> c
    int d -> d
    int e -> e
    java.lang.Thread f -> f
    boolean g -> g
    android.media.AudioRecord h -> h
    boolean i -> i
    void <init>(org.fmod.FMODAudioDevice,int,int) -> <init>
    int a() -> a
    void b() -> b
    void c() -> c
    void run() -> run
    void d() -> d
